{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACAD,EAAAE,OAAOC,KAAK,CAAEC,kBAAmB,WAAYC,qBAAsB,WAEnE,IAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,yBACnCE,KAAMH,SAASC,cAAc,wBAC7BG,OAAQJ,SAASC,cAAc,2BAGjCH,EAAKC,KAAKM,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAIC,iBACJ,IAAML,EAAaM,OAAOV,EAAKI,WAAWO,OACpCN,EAAOK,OAAOV,EAAKK,KAAKM,OACxBL,EAASI,OAAOV,EAAKM,OAAOK,OAElC,GAAIP,EAAa,GAAKC,EAAO,GAAKC,EAAS,EACzCZ,EAAAE,OAAOgB,QAAS,+BACT,GAAEN,EAAS,EAClBZ,EAAAE,OAAOgB,QAAS,sCAEd,IAAG,IAAIC,EAAI,EAAGA,GAAKP,EAAQO,GAAK,EAAG,CAEnCC,EAAcD,EADIT,EAAaC,GAAQQ,EAAI,IACfE,KAAKC,GAAWC,MAAMC,E,CAItD,SAASJ,EAAcK,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAIP,SAASJ,EAAUY,G,IAAET,EAAFS,EAAET,SAAUC,EAAZQ,EAAYR,MAC7B1B,EAAAE,OAAOiC,QAAQ,uBAAwCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,M,CAG/D,SAASF,EAAQU,G,IAAET,EAAFS,EAAET,SAAUC,EAAZQ,EAAYR,MAC3B1B,EAAAE,OAAOgB,QAAQ,sBAAqCkB,OAAfX,EAAS,QAAYW,OAANV,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nNotify.init({ cssAnimationStyle: 'from-top', fontAwesomeIconStyle: 'shadow' });\n\nconst refs = {\n  form: document.querySelector('.form'),\n  firstDelay: document.querySelector('input[name = \"delay\"]'),\n  step: document.querySelector('input[name = \"step\"]'),\n  amount: document.querySelector('input[name = \"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  const firstDelay = Number(refs.firstDelay.value);\n  const step = Number(refs.step.value);\n  const amount = Number(refs.amount.value);\n\n  if (firstDelay < 0 || step < 0 || amount < 0) {\n    Notify.failure(`❌ Put positive numbers`);\n  } else if (amount < 1) {\n    Notify.failure(`❌ Put correct amount quantity`);\n  } else {\n    for (let i = 1; i <= amount; i += 1) {\n      const delayStep = firstDelay + step * (i - 1);\n      createPromise(i, delayStep).then(onSuccess).catch(onError);\n    }\n  }\n\n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n\n    return new Promise((fulfill, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          fulfill({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n\n  function onSuccess({ position, delay }) {\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  }\n\n  function onError({ position, delay }) {\n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  }\n}\n"],"names":["$h6c0i","parcelRequire","Notify","init","cssAnimationStyle","fontAwesomeIconStyle","$ce04d3a99e08e73b$var$refs","form","document","querySelector","firstDelay","step","amount","addEventListener","evt","preventDefault","Number","value","failure","i","createPromise","then","onSuccess","catch","onError","position","delay","shouldResolve","Math","random","Promise","fulfill","reject","setTimeout","param","success","concat"],"version":3,"file":"03-promises.96e37939.js.map"}